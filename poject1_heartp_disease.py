# -*- coding: utf-8 -*-
"""Poject1_Heartp_Disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14eD3McKUC_Z2xT8G61KFbhG5ydmt19rZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
# import evalution Libraries
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score
from sklearn.metrics import roc_curve

"""**Exploring the Data:**

1.what problems i am going to solve?

2.what kind of data i have?

3.Does this data have missing value?

4.Are there any outliers,sporious vector

5.Can i add or remove some features?
"""

heasrt_disease = pd.read_csv('/content/heart-disease.csv')
heasrt_disease.head(10)

heasrt_disease.shape

heasrt_disease['target'].value_counts()

heasrt_disease['target'].value_counts().plot(kind='bar',color=['red','green']);

heasrt_disease.isna().sum()

heasrt_disease.describe()

heasrt_disease.info()

heasrt_disease['sex'].value_counts() # 1 show male and 0 show female

len(heasrt_disease)

207/303  # total male

pd.crosstab(heasrt_disease.target,heasrt_disease.sex)

72/96 # women have disease

24/96 # women have no disease

93/207 # male have disease

114/207 # male have no disease

pd.crosstab(heasrt_disease.target,heasrt_disease.sex).plot(kind='bar',
                                                           figsize=(10,6),
                                                           color=['red','green'])
plt.title('Heart Disease Frequency for Sex')
plt.xlabel('0 = No Disease, 1 = Disease')
plt.ylabel('Frequency')
plt.legend(['Female','Male'])
plt.xticks(rotation=0)
plt.show()

# find pattern in data using scatter plot
pd.crosstab(heasrt_disease.thalach,heasrt_disease.age).plot(kind='bar',
                                                           figsize=(10,6),
                                                           color=['red','green'])
plt.title('Heart Disease Frequency for Sex')
plt.xlabel('0 = No Disease, 1 = Disease')
plt.ylabel('Frequency')
plt.legend(['Male','Female'])
plt.xticks(rotation=0)
plt.show()

heasrt_disease.thalach.value_counts() # in thalach ,91 are different value
# therefore we can not sketch in bar graph so it is not good way

# find pattern in data using scatter plot
plt.figure(figsize=(10, 6)) # Change the curly braces to parentheses for figsize
# those who have  disease ,the color is red
# relation btw age and thalach(maximum rate achieved) and those which have heart disease of age and thalach
plt.scatter(heasrt_disease.age[heasrt_disease.target==1], heasrt_disease.thalach[heasrt_disease.target==1], c='red'); # Corrected the variable name

# find pattern in data using scatter plot
plt.figure(figsize=(10, 6)) # Change the curly braces to parentheses for figsize
# those who have not disease ,the color is green
# relation btw age and thalach(maximum rate achieved) and those which have heart disease of age and thalach
plt.scatter(heasrt_disease.age[heasrt_disease.target==0], heasrt_disease.thalach[heasrt_disease.target==0], c='green'); # Corrected the variable name

plt.figure(figsize=(10, 6))
# those who have  disease ,the color is red
plt.scatter(heasrt_disease.age[heasrt_disease.target==1], heasrt_disease.thalach[heasrt_disease.target==1], c='red');
# those who have not disease ,the color is green
plt.scatter(heasrt_disease.age[heasrt_disease.target==0], heasrt_disease.thalach[heasrt_disease.target==0], c='green');
plt.xlabel("With respect to Age")
plt.ylabel("With respect to Maximum Heart Rate")
plt.title("Heart Disease Frequency According to Age and Thalach")
plt.legend(["Disease", "No Disease"])
plt.show()

# create histrogram to see age distribution
heasrt_disease.age.plot.hist()

"""**chesr pain Type:**

 0 typical angina ;chest pain dues to decrease bloood pressur

1 atypical angina ; chest pain not relate to heart problem

2 non anginal pain ; not related to heart problem

3 asymtomatic ; chest pain not showing heart problem
"""

heasrt_disease.cp.value_counts()

pd.crosstab(heasrt_disease.cp,heasrt_disease.target)

# make the bar chart chest pain type vs target
pd.crosstab(heasrt_disease.cp,heasrt_disease.target).plot(kind='bar',
                                                           figsize=(10,6),
                                                           color=['red','green'])
# make some description of bar chart
plt.xlabel("chest pain type")
plt.ylabel("target OR counts")
plt.title("Heart Disease Frequency According to Chest Pain Type")
plt.legend(["No Disease", "Disease"])
plt.show()

"""**Correlation:** how to relate feature each other

(+) postive correlation (mean one feature is maximum then other feature is maximum Like Friend )

(-) negative correlation (mean one feature is maximum then other feature is minimum Like Enemy )

(
  1) correlation one feature is relation to itself
"""

heasrt_disease.corr()

"""****Ploting the Correlation:**"""

corr_map = heasrt_disease.corr()

home,room = plt.subplots(figsize=(10,10))
room = sns.heatmap(corr_map,annot=True,
                   linewidths=1,
                   fmt='0.2f',
                   cmap='YlGnBu');
plt.show()

"""**split the data**"""

heasrt_disease.head()

# split the feature and target
X = heasrt_disease.drop('target',axis=1)
y = heasrt_disease['target']

# split the data into train and test

# using random seed so that other could produce the same results
np.random.seed(7)

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

len(X)

len(X_train)

"""**Model:**
we are going to apply on data

1.K_Nearest Neighbour classifier

2.Random Forest classifier

3.logistic Regression
"""

from sklearn.linear_model import LogisticRegression

models= {'KNN':KNeighborsClassifier(),
         'Random Forest':RandomForestClassifier(),
         'logistic regression':LogisticRegression()}

def fit_and_score(models,X_train,X_test,y_train,y_test):
  np.random.seed(7)

  # make the dictionary to store the score
  model_score = {}
  # using the looping through
  for name,model in models.items(): # Changed .item() to .items()
       model.fit(X_train,y_train)
       # Evaluting the model and append it score
       model_score[name] = model.score(X_test,y_test)
  return model_score

model_score = fit_and_score(models=models,
                            X_train=X_train,
                            X_test=X_test,
                            y_train=y_train,
                            y_test=y_test)
model_score

model_compare = pd.DataFrame(model_score,index=['Accuracy'])
model_compare.plot.bar();

"""**Improving the Model:**

Universal method used for classificaton probelm



1.Hyperparameter tuning

2.features improving advanced level

3.confusion matrix

4.Cross validation

5.precision

6.recall

7.F1

8.classification report

9.roc curve

10.auc curve
"""

knn = KNeighborsClassifier()
knn.get_params()

train_score = []
test_score = []

# create range to test to set neighbours
kneighbours = range(1,30)

knn = KNeighborsClassifier()
# using loop
for i in kneighbours:
  knn.set_params(n_neighbors=i)
  knn.fit(X_train,y_train)
  train_score.append(knn.score(X_train,y_train))
  test_score.append(knn.score(X_test,y_test))

train_score

test_score

plt.plot(kneighbours,train_score,label='train score')
plt.plot(kneighbours,test_score,label='test score')
plt.xticks(np.arange(1,31,1))
plt.xlabel('k')
plt.ylabel('accuracy')
plt.legend();
print(f'Max KNN score is {max(test_score)}')

print(f'Max KNN score is {max(test_score)}')

